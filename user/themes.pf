// This defines themes to be assigned to the hub's `theme` variable.

newtype 

Theme = enum ABYSS, DARK, DARK_MODERN, DARK_PLUS, KIMBIE_DARK, QUIET_LIGHT, 
          .. SOLARIZED_DARK
Style = enum REGULAR, BOLD, ITALIC, UNDERLINE
Font = struct(r, g, b int, style Style)

const

DEFAULT_DARK_BRACKETS = [Font(0xFF, 0xD7, 0x00, REGULAR),
                      .. Font(0xDA, 0x70, 0xD6, REGULAR),
                      .. Font(0x17, 0x9F, 0xFF, REGULAR)]

DARK_MODERN_OR_PLUS = map( ..
    .. "comment"::Font(0x6A, 0x99, 0x55, REGULAR),
    .. "constant"::Font(0x4F, 0xC1, 0xFF, REGULAR),
    .. "control"::Font(0xC5, 0x86, 0xC0, REGULAR),
    .. "function"::Font(0xDC, 0xDC, 0xAA, REGULAR),
    .. "number"::Font(0xB5, 0xCE, 0xA8, REGULAR),
    .. "reserved"::Font(0x56, 0x9C, 0xD6, REGULAR),
    .. "string"::Font(0xCE, 0x91, 0x78, REGULAR),
    .. "type"::Font(0x4E, 0xC9, 0xB0, REGULAR),
    .. "variable"::Font(0x9C, 0xDC, 0xFE, REGULAR),
    .. "brackets"::DEFAULT_DARK_BRACKETS),

THEMES = map( ..
.. ABYSS::map( ..
    .. "comment"::Font(0x38, 0x48, 0x87, REGULAR),
    .. "constant"::Font(0x66, 0x88, 0xCC, REGULAR),
    .. "control"::Font(0x22, 0x55, 0x88, REGULAR),
    .. "function"::Font(0xDD, 0xBB, 0x88, REGULAR), 
    .. "number"::Font(0xF2, 0x80, 0xD0, REGULAR),
    .. "reserved"::Font(0x22, 0x55, 0x88, REGULAR),
    .. "string"::Font(0x22, 0xAA, 0x44, REGULAR),
    .. "type"::Font(0xFF, 0xEE, 0xBB, UNDERLINE),
    .. "variable"::Font(0x66, 0x88, 0xCC, REGULAR),
    .. "brackets"::DEFAULT_DARK_BRACKETS), 
.. DARK::map( ..
    .. "comment"::Font(0x6A, 0x99, 0x55, REGULAR),
    .. "control"::Font(0x56, 0x9C, 0xD6, REGULAR),
    .. "function"::Font(0xDC, 0xDC, 0xAA, REGULAR),
    .. "number"::Font(0xB5, 0xCE, 0xA8, REGULAR),
    .. "reserved"::Font(0x56, 0x9C, 0xD6, REGULAR),
    .. "string"::Font(0xCE, 0x91, 0x78, REGULAR),
    .. "variable"::Font(0x9C, 0xDC, 0xFE, REGULAR),
    .. "brackets"::DEFAULT_DARK_BRACKETS),
.. DARK_MODERN::DARK_MODERN_OR_PLUS,
.. DARK_PLUS::DARK_MODERN_OR_PLUS,
.. KIMBIE_DARK::map( ..
    .. "comment"::Font(0xA5, 0x7A, 0x4C, REGULAR),
    .. "constant"::Font(0xDC, 0x39, 0x58, REGULAR),
    .. "control"::Font(0x98, 0x67, 0x6A, REGULAR),
    .. "function"::Font(0x8A, 0xB1, 0xB0, REGULAR),
    .. "number"::Font(0xF7, 0x9A, 0x32, REGULAR),
    .. "reserved"::Font(0x98, 0x67, 0x6A, REGULAR),
    .. "string"::Font(0x88, 0x9B, 0x4A, REGULAR),
    .. "type"::Font(0xF0, 0x64, 0x31, REGULAR),
    .. "variable"::Font(0xDC, 0x39, 0x58, REGULAR),
    .. "brackets"::DEFAULT_DARK_BRACKETS),
.. QUIET_LIGHT::map( ..
    .. "comment"::Font(0xAA, 0xAA, 0xAA, ITALIC),
    .. "constant"::Font(0x9C, 0x5D, 0x27, REGULAR),
    .. "control"::Font(0x4B, 0x69, 0xC6, REGULAR),
    .. "function"::Font(0xAA, 0x37, 0x31, BOLD),
    .. "number"::Font(0x9C, 0x5D, 0x27, REGULAR),
    .. "reserved"::Font(0x4B, 0x69, 0xC6, REGULAR),
    .. "string"::Font(0x44, 0x8C, 0x27, REGULAR),
    .. "type"::Font(0x7A, 0x3E, 0x9D, BOLD),
    .. "variable"::Font(0x7A, 0x3E, 0x9D, REGULAR),
    .. "brackets"::[Font(0x04, 0x31, 0xFA, REGULAR),
                 .. Font(0x31, 0x93, 0x31, REGULAR),
                 .. Font(0x7B, 0x38, 0x14, REGULAR)]),
.. SOLARIZED_DARK::map( ..
    .. "comment"::Font(0x58, 0x6E, 0x75, ITALIC),
    .. "constant"::Font(0x26, 0x8B, 0xD2, REGULAR),
    .. "control"::Font(0x85, 0x99, 0x00, REGULAR),
    .. "function"::Font(0x26, 0x8B, 0xD2, REGULAR),
    .. "number"::Font(0xD3, 0x36, 0x82, REGULAR),
    .. "reserved"::Font(0x85, 0x99, 0x00, REGULAR),
    .. "string"::Font(0x2A, 0xA1, 0x98, REGULAR),
    .. "type"::Font(0xCB, 0x4B, 0x16, REGULAR),
    .. "variable"::Font(0x26, 0x8B, 0xD2, REGULAR),
    .. "brackets"::[Font(0xCD, 0xCD, 0xCD, REGULAR),
                 .. Font(0xB5, 0x89, 0x00, REGULAR),
                 .. Font(0xD3, 0x36, 0x82, REGULAR)]))

// .. ::map( ..
//     .. "comment"::Font(0x, 0x, 0x, REGULAR),
//     .. "constant"::Font(0x, 0x, 0x, REGULAR),
//     .. "control"::Font(0x, 0x, 0x, REGULAR),
//     .. "function"::Font(0x, 0x, 0x, REGULAR),
//     .. "number"::Font(0x, 0x, 0x, REGULAR),
//     .. "reserved"::Font(0x, 0x, 0x, REGULAR),
//     .. "string"::Font(0x, 0x, 0x, REGULAR),
//     .. "type"::Font(0x, 0x, 0x, REGULAR),
//     .. "variable"::Font(0x, 0x, 0x, REGULAR)
//     .. "brackets"::[Font(0x, 0x, 0x, REGULAR),
//                  .. Font(0x, 0x, 0x, REGULAR),
//                  .. Font(0x, 0x, 0x, REGULAR)]),
