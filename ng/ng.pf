import 

"phonemes.pf"

newtype

Token = struct(tokenType TokenType, value any?, lineNumber int)
TokenType = enum WORD, NUMBER, SYMBOL, EOL
RuneType = enum ALPHABETIC, NUMERAL, PUNCTUATION, WHITESPACE, NEWLINE

var 

words = map()

cmd

add(sn snippet) :
    words = combine words, (sn -> tokenize -> parseWordList)

show vocab :
    post display words

def 

combine(M, N map) :
    from m = M for k::v = range N :
        m with k::v

tokenize(sn snippet) :
    sn -> glue -> lex

glue(sn snippet) :
    from str = "" for _::el = range sn :
        str + string(el)

// Lexer

runeType(r rune) :
    r in set(' ', '\t', '\r') :
        WHITESPACE
    r == '\n' :
        NEWLINE
    r in set('(', ')', '+', '/', ',') :
        PUNCTUATION
    65 <= cp and cp < 91 :
        ALPHABETIC
    97 <= cp and cp < 123 :
        ALPHABETIC
    r == '-' :        
        ALPHABETIC         // So we can kebab-case things.
    48 <= cp and cp < 58 :
        NUMERAL
    else :
        error "Can't lex rune '" + r + "'"
given :
    cp = codepoint r

lex(s string) :
    first from L, word, line = [], "", 1 for _::r = range (s + "\n"):
        word == "" :
            rType == WHITESPACE :
                continue
            rType == NEWLINE :
                L + [Token(EOL, null, line)], "", line + 1
            else :
                L, word + r, line
        else :
            rType == PUNCTUATION :
                L + [makeTok(word, line)], "" + r, line
            rType != wType :
                rType == WHITESPACE :
                    L + [makeTok(word, line)], "", line 
                rType == NEWLINE :
                    L + [makeTok(word, line), makeTok("\n", line)], "", line + 1
                else :
                    L + [makeTok(word, line)], "" + r, line   
            else :
                L, word + r, line 
    given :
        rType = runeType(r)
        wType = runeType(word[0])        

makeTok(word string, line int) :
    wType == NEWLINE :
        Token(EOL, NULL, line)
    wType == NUMERAL :
        Token(NUMBER, int(word), line)
    wType == ALPHABETIC :
        Token(WORD, word, line)
    wType == PUNCTUATION :
        Token(SYMBOL, word, line)
    else :
        error "Can't lex '" + word + "'"
given :
    wType = runeType word[0]

// For parsing lists of words for 'add' or 'retcon'.
parseWordList(toks list) -> map :
    from result = map() for _::i = range 0::(len(toks) div 4) :
        4 * i + 3 > len(toks) or toks[4 * i + 3][tokenType] != EOL :
            error "malformed definition at line " + line + " of snippet"
        toks[4 * i][tokenType] != WORD :
            error "expected a word at start of line " + line + " of snippet"
        toks[4 * i + 1][tokenType] != WORD or  toks[4 * i + 1][value] != "-" :
            error "expected a '-' to separate words at " + line + " of snippet"
        toks[4 * i + 2][tokenType] != WORD :
            error "expected a word after '-' at line " + line + " of snippet" 
        else :
            result with toks[4 * i][value]::toks[4 * i + 2][value]
    given : 
        line = string(toks[4 * i][lineNumber])

const 

COLUMNS = 3
WIDTH = 25

def

display(M map) :
    len(M) == 0 :
        "Vocab list is empty."
    else :
        first from result, c = "", 1 for k::v = range M :
            c mod COLUMNS == 0 :
                result + str + "\n", c + 1
            else :
                result + str, c + 1
        given :
            str = pad("â–ª " + k + " - " + v)

pad(s string) :
    len(s) > WIDTH :
        error "string too wide to pad"
    else :
        from result = s for _::i = range 0::(WIDTH - len s) :
            result + " "
