newtype

Z = clone{i int} int :       // Some modular arithmetic.
    0 <= that and that < i

make Z{5}, Z{12}

def

(x Z{i int}) + (y Z{i int}) :
    Z{i}(int(x) + int(y) mod i)

newtype

Vec = clone{i int} list :    // Vectors!
    len(that) == i

make Vec{2}, Vec{3}

def

(v Vec{i int}) + (w Vec{i int}) :
    Vec{i} from a = [] for j::el = range v :
        a + [el + w[j]] 

(v Vec{3}) + (w Vec{3}) :
    Vec{3}[]

newtype 

list = clone{T type} list using +, slice :
    from a = true for _::el = range that :
        el in T :
            continue 
        else :
            break false

make list{int}

