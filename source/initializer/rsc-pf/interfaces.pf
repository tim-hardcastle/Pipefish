newtype

Addable = interface :
    (x self) + (y self) -> self

Comparable = interface :
    (x self) < (y self) -> bool
    (x self) <= (y self) -> bool
    (x self) > (y self) -> bool
    (x self) >= (y self) -> bool

Dividable = interface :
    (x self) / (y self) -> float

Lennable = interface :
    len(x self) -> int 

Multipliable = interface :
    (x self) * (y self) -> self

Negatable = interface :
    -(x self) -> self 

Stringable = interface :
    string(x self) -> string

Subtractable = interface :
    (x self) - (y self) -> self

Varchar = clone{i int} string :
    len that <= i 

list = clone{T type} list using +, slice :
    from a = true for _::el = range that :
        el in T :
            continue 
        else :
            break false

set = clone{T type} set using + :
    from a = true for _::el = range that :
        el in T :
            continue 
        else :
            break false

pair = clone{K, V type} pair :
    that[0] in K and that[1] in V

map = clone{K, V type} map :
    from a = true for k::v = range that :
        k in K && v in V :
            continue 
        else :
            break false
