// A little app to go through the sourcecode and see if any error codes are either unmatched
// in the error file, or duplicated, or declared in the error file but unused.

import

"path/filepath"
"regexp"
"strings"

const 

// Things that have the right format to be error codes but aren't (or in the case of
// 'vm/user', shouldn't have an error message).
FALSE_POSITIVES = set(`"database/sql"`, `"encoding/json"`, `"math/rand"`, `"net/http"`, 
                   .. `"os/exec"`, `"path/filepath"`, `"html/template"`, `"vm/user"`)

cmd

main :
    global $moduleDirectory
    get filenames from Filenames($moduleDirectory, RECURSIVE)
    errorFile = ""
    allTheOtherCode = ""
    for _::filename = range filenames :
        filepath.ext(filename) == ".go" :
            get code from File(filename)
            filepath.base(filename) == "errorfile.go" :
                errorFile = code
            else :
                allTheOtherCode = allTheOtherCode + code
    post makeResult(errorFile, allTheOtherCode)

def 

makeResult(errorFile, allTheOtherCode string) :
    "Codes used but not defined are:\n" + prettySet(usedSet - definedSet - FALSE_POSITIVES) + ..
 .. "\n\nCodes used more than once are\n" + prettySet(duplicates - FALSE_POSITIVES) + .. 
 .. "\n\nCodes defined but not used are\n" + prettySet(definedSet - usedSet - FALSE_POSITIVES)
given :
    definedList = regexp.findAllString(`"[a-z]+\/[a-z\/]+"`, errorFile, -1)
    definedSet = set(definedList ...)
    usedList = regexp.findAllString(`"[a-z]+\/[a-z\/]+"`, allTheOtherCode, -1)
    usedSet, duplicates = getDuplicates(usedList)

getDuplicates(L list) :
    from a, dups = set(), set() for _::v = range L :
        v in a :
            a, dups + set(v)
        else :
            a + set(v), dups 

prettySet(S set) :
    from a = "" for _::v = range S :
        a + "\n  â–ª " + v 
